The SSH protocol is a method for secure remote login from one computer to another.

There are a few basic Git commands that you will always use. 
When starting out with a new repository, you only need create it once: either locally, and then push to GitHub, or by cloning an existing repository by using the command "git init".
"git add" moves changes from the working directory to the staging area. 
"git status" allows you to see the state of your working directory and the staged snapshot of your changes. 
"git commit" takes your staged snapshot of changes and commits them to the project. 
"git reset" undoes changes that you’ve made to the files in your working directory. 
"git log" enables you to browse previous changes to a project. 
"git branch" lets you create an isolated environment within your repository to make changes. 
"git checkout" lets you see and change existing branches. 
"git merge" lets you put everything back together again. 

GitHub is the online hosting service for Git repositories.
Repositories is data structure store documents including application source code and enable contributors to track and maintain version-control.
What is special about the Git Repository model? Git is designed as a distributed version-control system. 
Primarily focused on tracking source code during development. 
Contains elements to coordinate among programmers, track changes, and support non-linear workflows.

An organization is a collection of user accounts that owns repositories. 
Organizations have one or more owners, who have administrative privileges for the organization.
Repositories are storage structures that can hold Code, track Issues, and enable you to collaborate with others.

Module Summary
In this module, you learned that:

A Distributed Version Control System (DVCS) keeps track of changes to code, regardless of where it is stored. This allows multiple users to work on the same codebase or repository, mirroring the codebase on their own computers if needed, while the distributed version control software helps manage synchronization amongst the various codebase mirrors.

Repositories are storage structures that:

Store the code

Track issues and changes

Enable you to collaborate with others

G​it is one of the most popular distributed version control systems. GitHub, GitLab and Bitbucket are examples of hosted version control systems.

All files in GitHub exist on a branch. 
The Master Branch contains the finished, deployable version of the code. 
Create new branches when you need to change the code. 
The new branch starts as an exact copy of the original branch. 
As you make changes, the branch that you created holds the changed code. 
More than one branch can be undergoing changes at the same time. 
Saved changes are called commits. 
Pull requests enables other users to review and use the proposed changes (committed). 
When you are ready to merge the changed code into the master branch, you merge the committed code changes into your master code.

The git diff command can help others reviewing your code to to identify and compare the changes.
The git-remote -v command can be used to check which remote repos you are synchronzing push and fetch changes with.

When to fork or clone?

By now you should be familiar with the difference between fork and clone. 
So let's summarize when you should clone vs. fork. 
Typically if you have access to a project repo e.g. as part of a team developing a codebase collaboratively, you can clone the repo and synchronize changes from your local copy of the repo using pull and push.
If however there is a public project that you want to contribute to but do not have write access to, or use a public project as a starting point for your own project, you can fork the project. 
Then work with the forked codebase by cloning it to your machine and collaborating with your development team working on the fork using the pull-push synchronization with your fork of the project. 
But if you want to contribute your changes back to the upstream project (the original project that you forked from), you can submit your changes using a pull request.

FYI: Although the usual workflow to start with the codebase of another project is to first fork it and then clone the fork, you may be tempted to simply clone the upstream project since it is quite convenient to do so from your local machine using the git clone command. 
If you do so, you will note that the project you clone from will by default become the origin repo. 
But since you likely don't have write access to the upstream repo that you cloned from, you will not be able to push your changes to it. 
Don't worry. You can easily rename the origin to upstream using the command git remote rename origin upstream and then add a new origin using git remote add origin <url> to point to the URL of a new GitHub repo that you have created or have access to, and use that repo for making your changes to the fork's code.

Welcome to Managing GitHub Projects. After watching this video, you will be able to: Understand common roles in a Git project. 
Use git commands to communicate with other developers. 
A Developer working as a participant in a group project needs to learn how to communicate with others and uses these commands in addition to the ones needed by a standalone developer. 
When working with Git, you can use Git commands or a desktop tool such as GitHub Desktop. 
git-clone from the upstream to prime the local repository. 
git-pull and git-fetch from "origin" to keep up-to-date with the upstream. git-push to shared repository, if you adopt CVS style shared repository workflow. 
git-format-patch to prepare e-mail submission, if you adopt Linux kernel-style public forum workflow. 
git-send-email to send your e-mail submission without corruption by your MUA. 
git-request-pull to create a summary of changes for your upstream to pull. 
An integrator in a group project receives changes made by others, reviews and integrates them that is responds to pull requests and publishes the result for others to use. 
Integrators use the following commands in addition to the ones needed by participants. 
git-am to apply patches e-mailed in from your contributors. 
git-pull to merge from your trusted lieutenants. 
git-format-patch to prepare and send suggested alternative to contributors. 
git-revert to undo botched commits. 
git-push to publish the bleeding edge. 
A Repository Administrator uses the following tools to set up and maintain access to the repository by developers. 
git-daemon to allow anonymous download from repository. 
git-shell can be used as a restricted login shell for shared central repository users. 
git-http-backend provides a server-side implementation of Git-over-HTTP ("Smart http") allowing both fetch and push services. 
gitweb provides a web front-end to Git repositories, which can be set-up using the git-instaweb script. 
Repository Admins can use GitHub Actions to automate software workflows, including continuous integration and continuous delivery. 
In this video, you learned: There are multiple roles involved in managing a project: Developer Integrator and Repository Administrator Each role uses different git commands to communicate with collaborators.

Large projects include people working in different roles:

Developer – creates code

Integrator – manages changes made by developers

Repository Administrator – configures and maintains access to the repository

Bash is a Unix command-line shell. The name is an acronym for Bourne-Again Shell. 
It comes with useful Unix commands like cat, ssh, SCP, etc., which are not usually found on Windows.

What is an SSH key?
An SSH key is an access credential in the SSH protocol. 
Its function is similar to that of user names and passwords, but the keys are primarily used for automated processes.

ssh-keygen -t rsa -b 4096 -C "<your email address>"
eval "$(ssh-agent -s)"
ssh-add ~/.ssh/id_rsa
cat ~/.ssh/id_rsa.pub